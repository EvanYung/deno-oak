image: docker:latest

stages:
  - 测试阶段
  - 构建阶段
  - 部署阶段

variables:
  IMAGE: ${HARBOR_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

.before_script: &before_script
  - IMAGE_TAG=${IMAGE}:${CI_COMMIT_SHA:0:8}
  - echo ${IMAGE_TAG}

cache:
  key: ${CI_COMMIT_REF_NAME}
  paths:
    - /root/.cache/deno

测试任务:
  image: denoland/deno:1.12.2
  stage: 测试阶段
  allow_failure: true
  only:
    - release
  tags:
    - dev
  before_script:
    - deno cache dev_deps.ts
    - deno cache deps.ts
  script:
    - deno lint
    - deno test -A --coverage=cov_profile
    - deno coverage cov_profile
  artifacts:
    name: 'cov_profile'
    paths:
      - cov_profile

构建任务:
  stage: 构建阶段
  only:
    - release
  tags:
    - dev
  dependencies: []
  before_script:
    - *before_script
    - docker login -u ${HARBOR_USER} -p ${HARBOR_PWD} ${HARBOR_REGISTRY}
  script:
    - docker build -t ${IMAGE_TAG} .
    - docker push ${IMAGE_TAG}
  artifacts:
    name: 'static'
    paths:
      - static

测试环境任务:
  stage: 部署阶段
  only:
    - release
  tags:
    - dev
  dependencies: []
  before_script:
    - *before_script
  script:
    - docker stop ${CI_PROJECT_NAME} && docker rm ${CI_PROJECT_NAME}
    - docker run -d --name deno-oak -p 8001:8001 ${IMAGE_TAG}

生产环境任务:
  stage: 部署阶段
  only:
    refs:
      - tags
      - web
  when: manual
  allow_failure: false
  tags:
    - test
  dependencies: []
  before_script:
    - if [${HARBOR_DEPLOY_VERSION} == ""]; then IMAGE_TAG=${IMAGE}:${CI_COMMIT_TAG}; else IMAGE_TAG=${IMAGE}:${HARBOR_DEPLOY_VERSION}; fi;
    - echo ${IMAGE_TAG}
  script:
    - docker stop ${CI_PROJECT_NAME} && docker rm ${CI_PROJECT_NAME}
    - docker pull ${IMAGE_TAG}
    - docker run -d --name deno-oak -p 8001:8001 ${IMAGE_TAG}
